name: build publish Test Pypi

on:
  push:
    tags:
      - '*'

jobs:
  build_wheels:
    name: "Package ${{ matrix.os }} | CP 3.${{matrix.python_minor_version}}"
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, macos-latest, ubuntu-20.04]
        python_minor_version: [8, 9]
    steps:

########################################################################################################################

      - name: "[MacOS] Configure XCode"
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable
        if: matrix.os == 'macos-latest'

########################################################################################################################

      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        name: "[All] Install Python 3.${{matrix.python_minor_version}}"
        with:
          python-version: '3.${{matrix.python_minor_version}}'

      - name: "[All] Test Python installation"
        run: |
          python -c "import os, sys; from sysconfig import get_paths; print(os.path.dirname(sys.executable)); print(get_paths())"

########################################################################################################################

      - name: "[Windows] Setup MSBuild"
        uses: microsoft/setup-msbuild@v1.0.2
        if: matrix.os == 'windows-latest'

########################################################################################################################

      - name: "[All] Install Python dependencies"
        run: |
          python -m pip install --upgrade pip
          python -m pip install cibuildwheel twine

########################################################################################################################

      - name: "[MacOS] Install gfortran with homebrew"
        run: |
          brew update >/dev/null
          brew upgrade
          brew install gfortran
        shell: bash
        continue-on-error: true
        if: matrix.os == 'macos-latest'


      - name: "[MacOS] Install gsl with homebrew"
        run: |
          brew update >/dev/null
          brew install gsl
        shell: bash
        if: matrix.os == 'macos-latest'

########################################################################################################################

      - name: "[MacOS] Install Adept"
        run: |
          wget http://www.met.reading.ac.uk/clouds/adept/adept-2.0.5.tar.gz
          tar -xf adept-2.0.5.tar.gz
          cd adept-2.0.5/
          ./configure --disable-fortran --silent
          make -j2 --silent
          sudo make install --silent
          cd include
          ./create_adept_source_header
          sudo cp adept_source.h /usr/local/include/
          cd ~
        shell: bash
        if: matrix.os == 'macos-latest'

########################################################################################################################

      - name: "[MacOS] Diagnostics"
        run: |
          xcodebuild -sdk -version
        if: matrix.os == 'macos-latest'

########################################################################################################################

      - name: "[MacOS | Python 3.8] Install boost"
        run: |
          wget https://dl.bintray.com/boostorg/release/1.73.0/source/boost_1_73_0.tar.gz > /dev/null 2>&1
          tar -xzf boost_1_*
          cd boost_1_*
          ./bootstrap.sh
          cat project-config.jam
          echo "using gcc ;" > project-config.jam && echo "project : default-build <toolset>gcc ;" >> project-config.jam && echo "import python ;" >> project-config.jam
          echo "using python    : 3.8    :  /Users/runner/hostedtoolcache/Python/3.8.6/x64/bin/python    : /Users/runner/hostedtoolcache/Python/3.8.6/x64/include/python3.8/    : /Users/runner/hostedtoolcache/Python/3.8.6/x64/lib/python3.8/ ;" >> project-config.jam
          ./b2 cxxflags=-std=c++17 install -j 8 --without-context --without-coroutine --without-fiber --without-thread
          cp -r bin.v2 /Users/runner/work/ESL/ESL/
        if: matrix.os == 'macos-latest' && matrix.python_minor_version == 8

########################################################################################################################

      - name: "[MacOS | Python 3.9] Install boost"
        run: |
          wget https://dl.bintray.com/boostorg/release/1.73.0/source/boost_1_73_0.tar.gz > /dev/null 2>&1
          tar -xzf boost_1_*
          cd boost_1_*
          ./bootstrap.sh
          cat project-config.jam
          echo "using gcc ;" > project-config.jam && echo "project : default-build <toolset>gcc ;" >> project-config.jam && echo "import python ;" >> project-config.jam
          echo "using python    : 3.9    :  /Users/runner/hostedtoolcache/Python/3.9.1/x64/bin/python    : /Users/runner/hostedtoolcache/Python/3.9.1/x64/include/python3.9/    : /Users/runner/hostedtoolcache/Python/3.9.1/x64/lib/python3.9/ ;" >> project-config.jam
          ./b2 cxxflags=-std=c++17 install -j 8 --without-context --without-coroutine --without-fiber --without-thread
          cp -r bin.v2 /Users/runner/work/ESL/ESL/
        if: matrix.os == 'macos-latest' && matrix.python_minor_version == 9

########################################################################################################################

      - name: "[MacOS] Build and publish"
        env:
          TWINE_USERNAME: ${{ secrets.TEST_PYPI_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.TEST_PYPI_PASSWORD }}

          CIBW_BUILD: 'cp3${{matrix.python_minor_version}}-macosx_x86_64'
        run: |
          python -m cibuildwheel --output-dir distribution
          python -m twine upload --repository testpypi distribution/*
        continue-on-error: true
        if: matrix.os == 'macos-latest'

########################################################################################################################

      - name: "[Linux] Build and publish"
        env:
          TWINE_USERNAME: ${{ secrets.TEST_PYPI_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.TEST_PYPI_PASSWORD }}
          CIBW_MANYLINUX_X86_64_IMAGE: manylinux2014
          CIBW_BUILD: 'cp3${{matrix.python_minor_version}}-manylinux*'
          CIBW_SKIP: '*i686'
          CIBW_BEFORE_ALL_LINUX: 'yum install -y wget epel-release gsl gsl-devel && wget https://dl.bintray.com/boostorg/release/1.73.0/source/boost_1_73_0.tar.gz > /dev/null 2>&1 && tar -xzf boost_1_* && cd boost_1_* && ./bootstrap.sh && echo "using gcc ;" > project-config.jam && echo "project : default-build <toolset>gcc ;" >> project-config.jam && echo "import python ;" >> project-config.jam &&   echo "using python    : 3.${{matrix.python_minor_version}}    :  /opt/python/cp3${{matrix.python_minor_version}}-cp3${{matrix.python_minor_version}}/bin/python    : /opt/python/cp3${{matrix.python_minor_version}}-cp3${{matrix.python_minor_version}}/include/python3.${{matrix.python_minor_version}}/    : /opt/python/cp3${{matrix.python_minor_version}}-cp3${{matrix.python_minor_version}}/lib/python3.${{matrix.python_minor_version}}/ ;" >> project-config.jam && ./b2 install -j 8 --with=all > /dev/null 2>&1 && cd ~ && wget http://www.met.reading.ac.uk/clouds/adept/adept-2.0.5.tar.gz && tar -xf adept-2.0.5.tar.gz && cd adept-2.0.5/ && ./configure && make -j2 && make install && cd include && ./create_adept_source_header && cp adept_source.h /usr/local/include/'
        run: |
          python -m cibuildwheel --output-dir distribution --platform linux
          python -m twine upload --repository testpypi distribution/*
        continue-on-error: true
        if: matrix.os == 'ubuntu-20.04'

########################################################################################################################
      - name: "[Windows] Install Adept"
        run: |
          wget http://www.met.reading.ac.uk/clouds/adept/adept-2.0.5.tar.gz -UseBasicParsing -OutFile adept-2.0.5.tar.gz
          tar -xf adept-2.0.5.tar.gz
          cd adept-2.0.5/include/
          wget https://gist.githubusercontent.com/maartenscholl/98e77aa7e378f92a41b309c3718736a1/raw/c68cd4b553709bd471584ac579c2d82710355504/adept_source.h  -UseBasicParsing -OutFile adept_source.h
          Copy-Item -Path * -Destination D:/a/ESL/ESL/adept -recurse -Force
        shell: powershell
        if: matrix.os == 'windows-latest'

#      - uses: actions/cache@v2
#        id: cache_boost_windows_cp38
#        with:
#          path: C:/Boost/*
#          key: ${{ runner.os }}-${{ hashFiles('C:/Boost/include/boost-1_73') }}
#        if: matrix.os == 'windows-latest' && matrix.python_minor_version == 8

########################################################################################################################

      - name: "[Windows] Install boost"
        run: |
          wget https://dl.bintray.com/boostorg/release/1.73.0/source/boost_1_73_0.tar.gz -UseBasicParsing -OutFile boost_1_73_0.tar.gz
          tar -xzf boost_1_73_0.tar.gz
          cd boost_1_73_0
          ./bootstrap.bat --prefix=C:/Boost
          ./b2 --prefix=C:/Boost address-model=64 --toolset=msvc variant=release link=static threading=multi runtime-link=shared install -j 8 --build-type=complete --without-atomic --without-context --without-coroutine --without-fiber --without-thread --without-graph --without-graph_parallel --without-wave
        if: matrix.os == 'windows-latest'
        #&& steps.cache_boost_windows_cp38.outputs.cache-hit != 'true'
        shell: powershell

########################################################################################################################

      - name: "[Windows] Build and publish"
        env:
          TWINE_USERNAME: ${{ secrets.TEST_PYPI_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.TEST_PYPI_PASSWORD }}
          CIBW_BUILD: 'cp3${{matrix.python_minor_version}}-win_amd64'
        run: |
          wget https://www.bruot.org/hp/media/files/libraries/gsl_2_4_msvc2015_64_r1.zip -UseBasicParsing -OutFile gsl_2_4_msvc2015_64_r1.zip
          tar -xf ./gsl_2_4_msvc2015_64_r1.zip
          $env:PATH += ";C:/Boost;C:/Boost/include/boost-1_73;C:/Boost/lib;D:/a/ESL/ESL/boost_1_73_0;D:/a/ESL/ESL/msvc2015_64/include;D:/a/ESL/ESL/msvc2015_64/lib/gsl;D:/a/ESL/ESL/adept"
          $env:CMAKE_GENERATOR="Visual Studio 16 2019"
          $env:CMAKE_GENERATOR_PLATFORM="x64"
          python -m cibuildwheel --output-dir distribution
          python -m twine upload --repository testpypi distribution/*
        continue-on-error: true
        shell: powershell
        if: matrix.os == 'windows-latest'
